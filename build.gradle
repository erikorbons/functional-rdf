buildscript {
    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE'
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.4.0'
    }
}

allprojects {
    apply plugin: 'com.cinnober.gradle.semver-git'

    group 'functional-rdf'

    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
    }
}

project(':collections') {
    apply plugin: 'java-library'

    ext.moduleName = 'hurricane.collections'

    dependencies {
        testImplementation 'junit:junit:4.12'
    }
}

project(':rdf:core') {
    apply plugin: 'java-library'

    ext.moduleName = 'hurricane.rdf.core'

    dependencies {
        implementation project(':collections')

        testImplementation 'junit:junit:4.12'
    }
}

// Configure Java projects:
configure(subprojects.findAll { p -> p.plugins.hasPlugin('java') }) {
    afterEvaluate {

        sourceCompatibility = '1.11'
        targetCompatibility = '1.11'

        // Configure Java tasks for Jigsaw modules:
        compileJava {
            inputs.property("moduleName", moduleName)

            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)

            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)

            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath
                ]
                classpath = files()
            }
        }
    }
}